filter(., sex == 'F', births >= 5000 & births <= 6000 )
m_f_freq_5000_6000 = rbind(mfreq,ffreq)
# part 5
temp = separate(yob2014, name, into=c('Name', 'first_letter'), sep = '^*', remove = FALSE)
# part 5
temp = separate(yob2014, name, into=c('Name', 'first_letter'), sep = '^*', remove = FALSE)
names_by_letter = temp %>%
group_by(., first_letter, sex) %>%
summarise(., n = sum(births))
ggplot(data=names_by_letter, aes(x = first_letter, y = n)) +
geom_col(aes(fill=sex))
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
# part 6
babynames = c('Chris', 'Christopher', 'Christian')
foldername = 'names'
column_names = c('name', 'sex', 'births')
CCC = Dataframer(foldername, column_names, babynames)
CCC %>%
group_by(., name, year) %>%
summarise(., prop = sum(proportion))
CCC_nosex = CCC %>%
group_by(., name, year) %>%
summarise(., prop = sum(proportion))
class(ccc$year)
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
ccc$year = ts(ccc['year'])
return(ccc)
}
class(CCC$year)
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_line(stat = 'identity', aes(color = name))
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
ggplot(data=CCC_nosex, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
ggplot(data=CCC_nosex, aes(x = year, y = prop)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = prop)) +
geom_freqpoly(stat = 'identity', aes(color = name))
CCC_nosex = CCC %>%
group_by(., name, year) %>%
summarise(., proportions_nosex = sum(proportion))
ggplot(data=CCC_nosex, aes(x = year, y = proportions_nosex)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportions)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name)) +
facet_wrap(~ sex)
#get total_births in df:
total_births = df %>%
summarise(., sum(births)) %>%
.[1,1]
# read into dataframe, df from yob1880.txt.
df <- read.csv('names/yob1880.txt', stringsAsFactors = F, col.names = column_names)
#get total_births in df:
total_births = df %>%
summarise(., sum(births)) %>%
.[1,1]
df %>%
summarise(., sum(births)) %>%
.[1,1]
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
CCC = Dataframer(foldername, column_names, babynames)
View(CCC)
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births_by_year = temp_total_births, total_births_by_name = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births_by_year = temp_total_births, total_births_by_name = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
CCC = Dataframer(foldername, column_names, babynames)
# read into dataframe, df from yob1880.txt.
df <- read.csv('names/yob1880.txt', stringsAsFactors = F, col.names = column_names)
df %>%
summarise(., sum(births)) %>%
.[1,1]
setwd("~/NYCDSA/Cohort/Unit_4_Data_Analysis_with_R/shiny_project")
fb = read.csv('data/rmfb.csv', stringsAsFactors = F)
View(fb)
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
wd()
getwd()
setwd()
setwd("~/NYCDSA/Cohort/Unit_4_Data_Analysis_with_R")
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
View(ld)
library(dplyr)
rm(list=ls())
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
View(ld)
rm(ld)
shiny::runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
reviews <- read.csv('~/NYCDSA/cohort/unit_5_data_analysis_with_python/introduction_to_web_scraping/reviews.csv', stringsAsFactors = F)
reviews <- read.csv('~/NYCDSA/cohort/unit_5_data__analysis_with_python/introduction_to_web_scraping/reviews.csv', stringsAsFactors = F)
Veiw(reviews)
View(reviews)
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
?legend.key.size
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
grid::unit(schmeckle, 5)
?grid::unit
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
library(rsconnect)
deployApp()
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
deployApp()
library(rsconnect)
deployApp()
shiny::runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
getwd()
setwd("~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard")
getwd()
rsconnect::deployApp(.)
rsconnect::deployApp(".")
?selectizeInput
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
View(df)
df_state = df %>%
filter(., LEVEL == 'State')
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
df_state = df %>%
filter(., LEVEL == 'State')
View(df_state)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df = as.integer(df$POP)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
df$POP = as.integer(df$POP)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
df$POP = as.integer(df$POP)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
View(df)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
library(dplyr)
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df <- read.csv('../data/sect203_all_areas.csv', stringsAsFactors = F)
View(df)
df_state_pop = df %>%
filter(., LEVEL == 'State', POP !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State', POP !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
library(dplyr)
df_state_pop = df %>%
filter(., LEVEL == 'State', POP !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State' & POP !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State' & POP !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State' & POP !is.na(POP)) %>%
group_by(NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df_state_pop = df %>%
filter(., LEVEL == 'State', POP !is.na(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State', is.na(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State', is.na(POP)) %>%
group_by(., NAMELSAD)
df_state_pop = df %>%
filter(., LEVEL == 'State', is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df_state_pop = df %>%
filter(., LEVEL == 'State', is.na(POP)) %>%
group_by(., NAMELSAD)
View(df_state_pop)
df_state_pop = df %>%
filter(., LEVEL == 'State', !is.na(POP)) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
df_state_pop$NAMELSAD = df_state_pop$NAMELSAD[-9]
df_state_pop = df %>%
filter(., LEVEL == 'State', !is.na(POP), NAMELSAD[-1]) %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
df_state_pop = df %>%
filter(., LEVEL == 'State', !is.na(POP), NAMELSAD != 'District of Columbia') %>%
group_by(., NAMELSAD) %>%
summarise(., population = sum(POP))
View(df_state_pop)
colnames(df_state_pop)[1] = 'state'
View(df_state_pop)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
inner_join(IncRaceStateIncome, df_state_pop, by = 'state')
IncRaceStateIncome = inner_join(IncRaceStateIncome, df_state_pop, by = 'state')
write_csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = 'NA', append = F)
?write.csv
write.csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = 'NA', append = F)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
shiny::runApp()
df_stat %>%
mutate(., incidents_per_pop = number_of_incidents/population)
test = IncRaceStateIncome %>%
mutate(., incidents_per_pop = number_of_incidents/population)
View(test)
IncRaceStateIncome = IncRaceStateIncome %>%
mutate(., incidents_per_pop = number_of_incidents/population)
write.csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = 'NA', append = F)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
runApp()
View(df_stat)
View(IncRaceStateIncome)
?write.csv
colnames(IncRaceStateIncome) = colnames(IncRaceStateIncome)[-c(1,2)]
View(IncRaceStateIncome)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
IncRaceStateIncome = IncRaceStateIncome[-c(1,2)]
View(IncRaceStateIncome)
View(IncRaceStateIncome)
write.csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = 'NA', row.names = F)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
View(IncRaceStateIncome)
runApp()
colnames(df_stat)
colnames(IncRaceStateIncome)
choice1 = colnames(df_stat)[colnames(df_stat) %in% c("num_regulations", "number_of_incidents", "incidents_per_pop" )]
runApp()
View(IncRaceStateIncome)
runApp()
runApp()
df_stat = read.csv('IncRaceStateIncome.csv', stringsAsFactors = F)
View(df_stat)
View(state.name)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
IncRaceStateIncome = IncRaceStateIncome %>%
arrange(., sort(state))
View(IncRaceStateIncome)
IncRaceStateIncome = IncRaceStateIncome %>%
arrange(., sort(state))
View(IncRaceStateIncome)
IncRaceStateIncome = IncRaceStateIncome %>%
sort(state)
IncRaceStateIncome = IncRaceStateIncome %>%
sort(.,state)
IncRaceStateIncome = IncRaceStateIncome %>%
arrange(., sort(state))
View(IncRaceStateIncome)
IncRaceStateIncome = IncRaceStateIncome %>%
arrange(., desc(state))
View(IncRaceStateIncome)
IncRaceStateIncome = IncRaceStateIncome %>%
arrange(., state)
View(IncRaceStateIncome)
write.csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = 'NA', row.names = F)
IncRaceStateIncome = read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
runApp()
runApp()
View(df_stat)
runApp()
runApp()
runApp()
runApp()
runApp()
