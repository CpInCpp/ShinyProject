summarise(., n_distinct(name))
n_K_names = yob2014 %>%
filter(.,startsWith(name,'K')) %>%
summarise(., sum(births))
group_by_name = yob2014 %>%
group_by(., name) %>%
summarise(., sexes = n())
unisex_total = group_by_name %>%
filter(., sexes == 2) %>%
count()
mfreq = yob2014 %>%
filter(., sex == 'M', births >= 5000 & births <= 6000 )
ffreq = yob2014 %>%
filter(., sex == 'F', births >= 5000 & births <= 6000 )
m_f_freq_5000_6000 = rbind(mfreq,ffreq)
# part 5
temp = separate(yob2014, name, into=c('Name', 'first_letter'), sep = '^*', remove = FALSE)
# part 5
temp = separate(yob2014, name, into=c('Name', 'first_letter'), sep = '^*', remove = FALSE)
names_by_letter = temp %>%
group_by(., first_letter, sex) %>%
summarise(., n = sum(births))
ggplot(data=names_by_letter, aes(x = first_letter, y = n)) +
geom_col(aes(fill=sex))
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
# part 6
babynames = c('Chris', 'Christopher', 'Christian')
foldername = 'names'
column_names = c('name', 'sex', 'births')
CCC = Dataframer(foldername, column_names, babynames)
CCC %>%
group_by(., name, year) %>%
summarise(., prop = sum(proportion))
CCC_nosex = CCC %>%
group_by(., name, year) %>%
summarise(., prop = sum(proportion))
class(ccc$year)
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
ccc$year = ts(ccc['year'])
return(ccc)
}
class(CCC$year)
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_line(stat = 'identity', aes(color = name))
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
ggplot(data=CCC_nosex, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
ggplot(data=CCC_nosex, aes(x = year, y = prop)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = prop)) +
geom_freqpoly(stat = 'identity', aes(color = name))
CCC_nosex = CCC %>%
group_by(., name, year) %>%
summarise(., proportions_nosex = sum(proportion))
ggplot(data=CCC_nosex, aes(x = year, y = proportions_nosex)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportions)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name))
# Part 7
ggplot(data=CCC, aes(x = year, y = proportion)) +
geom_freqpoly(stat = 'identity', aes(color = name)) +
facet_wrap(~ sex)
#get total_births in df:
total_births = df %>%
summarise(., sum(births)) %>%
.[1,1]
# read into dataframe, df from yob1880.txt.
df <- read.csv('names/yob1880.txt', stringsAsFactors = F, col.names = column_names)
#get total_births in df:
total_births = df %>%
summarise(., sum(births)) %>%
.[1,1]
df %>%
summarise(., sum(births)) %>%
.[1,1]
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
CCC = Dataframer(foldername, column_names, babynames)
View(CCC)
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births_by_year = temp_total_births, total_births_by_name = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
# This function will take in the folder name, column names, and the baby names of interest and
# return a dataframe of those names from all files in the folder.  The files are broken up by years.
Dataframer = function(folder, column_names, name_vec) {
# Grab the year off the filename:
Yearname = function(filestring) {
return(substr(filestring, 4,7))
}
# return Dataframe:
Microframer = function(folder, filename, column_names, name_vec) {
fpath = paste(folder, filename, sep='/')
df = read.csv(fpath, col.names = column_names, stringsAsFactors = F)
temp_total_births =  df %>%
summarise(., sum(births)) %>%
.[1,1]
tempdf = df %>%
filter(., name %in% name_vec) %>%
group_by(., name, sex) %>%
summarise(., total_births_by_year = temp_total_births, total_births_by_name = sum(births), proportion = (sum(births)/temp_total_births)) %>%
mutate(., year = Yearname(filename))
tempdf$year = ts(tempdf['year'])
return(tempdf)
}
#Get a file list...
file_list <- list.files(path=folder, pattern="*.txt")
# get first dataframe for which to stack upon...
ccc = Microframer(folder, file_list[1], column_names, name_vec)
# start stacking dataframes with this forloop...
for (i in 2:length(file_list)){
filepath = file_list[i]
tempdfloop = Microframer(folder, filepath, column_names, name_vec)
ccc = rbind(ccc, tempdfloop)
}
return(ccc)
}
CCC = Dataframer(foldername, column_names, babynames)
# read into dataframe, df from yob1880.txt.
df <- read.csv('names/yob1880.txt', stringsAsFactors = F, col.names = column_names)
df %>%
summarise(., sum(births)) %>%
.[1,1]
setwd("~/NYCDSA/Cohort/Unit_4_Data_Analysis_with_R/shiny_project")
fb = read.csv('data/rmfb.csv', stringsAsFactors = F)
View(fb)
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
wd()
getwd()
setwd()
setwd("~/NYCDSA/Cohort/Unit_4_Data_Analysis_with_R")
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
View(ld)
library(dplyr)
rm(list=ls())
ld = read.csv('data/LDdata.csv', stringsAsFactors = F)
View(ld)
rm(ld)
shiny::runApp('~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard')
mass <- read.csv('../data/clean/mass.csv', stringsAsFactors = F)
setwd("~/NYCDSA/Cohort/projects/shiny/gunviolence")
mass <- read.csv('../data/clean/mass.csv', stringsAsFactors = F)
setwd("~/NYCDSA/Cohort/projects/shiny/gunviolence/dashboard")
mass <- read.csv('../data/clean/mass.csv', stringsAsFactors = F)
View(mass)
colnames(mass)
colnames(mass)[colnames(mass) == 'Gender']
colnames(mass)[colnames(mass) == 'Gender'] = 'sex'
colnames(mass)[colnames(mass) == 'Gender']
colnames(mass)[colnames(mass) == 'sex']
View(mass)
write_csv(mass, '../data/clean/mass.csv', na = 'NA', append = F)
mass <- read.csv('../data/clean/mass.csv', stringsAsFactors = F)
View(mass)
runApp()
runApp()
mass <- read.csv('../data/clean/mass.csv', stringsAsFactors = F)
runApp()
mass %>%
mutate(., Year = year(Date) ) %>%
group_by(., sex, Year ) %>%
summarise(., Incidents = n())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?splitLayout
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Correlation on IncRaceStateIncome
# null hyp: stats are correlated
IncRaceStateIncome <- read.csv('../data/clean/IncRaceStateIncome.csv', stringsAsFactors = F)
View(IncRaceStateIncome)
statA = IncRaceStateIncome$med_household_income
statB= IncRaceStateIncome$number_of_incidents
cor.test(statA, statB)
runApp()
colnames(df_stat)
runApp()
?selectizeInput
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mass)
runApp()
runApp()
colnames(mass)
runApp()
rem_col = which(colnames(mass) == 'Incident.Area', 'Latitude', 'Longitude', 'Employed,at', 'Employeed..Y.N.')
rem_col = which(colnames(mass) == c('Incident.Area', 'Latitude', 'Longitude', 'Employed,at', 'Employeed..Y.N.'))
runApp()
rem_col
rem_col = which(colnames(mass) == c('Incident.Area', 'Open.Close.Location', 'Employeed..Y.N.', 'Employed.at', 'Latitude', 'Longitude'))
rem_col = which(colnames(mass) %in% c('Incident.Area', 'Open.Close.Location', 'Employeed..Y.N.', 'Employed.at', 'Latitude', 'Longitude'))
runApp()
rem_col
mass_columns = colnames(mass)[-rem_col]
mass_columns
runApp()
rm(reg_5yr)
rm(reg)
View(color_race_lookup)
rm(color_race_lookup)
View(IncRaceStateIncome)
partisan <- read.csv('../data/partisan.csv', stringsAsFactors = F)
partisan <- read.csv('../data/partisanship.csv', stringsAsFactors = F)
View(partisan)
partisan <- read.csv('../data/partisanship.csv', stringsAsFactors = F, col.names = c('state', 'party'))
View(partisan)
partisan = partisan %>%
filter(., complete.cases(state))
View(partisan)
partisan = partisan %>%
filter(., complete.cases())
partisan = partisan %>%
filter(., state != '')
View(partisan)
partisan2 <- read.csv('../data/partisanship2.csv', stringsAsFactors = F, col.names = c('state', 'party'))
partisan <- read.csv('../data/partisanship.csv', stringsAsFactors = F, col.names = c('state', 'party'))
View(partisan)
partisan <- read.csv('../data/partisanship.csv', stringsAsFactors = F, col.names = c('state', 'party'))
View(partisan)
View(IncRaceStateIncome)
View(IncRaceStateIncome)
inner_join(IncRaceStateIncome, partisan, by = state)
inner_join(IncRaceStateIncome, partisan, by = 'state')
IncRaceStateIncome = inner_join(IncRaceStateIncome, partisan, by = 'state')
write_csv(IncRaceStateIncome, '../data/clean/IncRaceStateIncome.csv', na = "NA", append = FALSE)
runApp()
rep_inc = IncRaceStateIncome %>%
filter(., party == 'Republican')
View(rep_inc)
View(rep_inc)
ggplot(data = rep_inc, aes(x = number_of_incidents)) +
geom_histogram()
View(partisan)
dem_inc = IncRaceStateIncome %>%
filter(., party == 'Democratic')
View(dem_inc)
View(mass_inc_by_sex)
runApp()
View(df_stat)
ggplot(df_stat, aes(state, number_of_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("List of genes ") +
xlab("List of patients") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(state, num_of_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("List of genes ") +
xlab("List of patients") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(state, num_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("List of genes ") +
xlab("List of patients") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(state, num_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("Number of Regulations") +
xlab("States") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(state, num_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "blue") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("Number of Regulations") +
xlab("States") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(state, num_regulations )) +
geom_tile(aes(fill = number_of_incidents), color = "white") +
scale_fill_gradient(low = "white", high = "steelblue") +
ylab("Number of Regulations") +
xlab("States") +
theme(legend.title = element_text(size = 10),
legend.text = element_text(size = 12),
plot.title = element_text(size=16),
axis.title=element_text(size=14,face="bold"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(fill = "Expression level")
ggplot(df_stat, aes(x = state, num_regulations, fill =  number_of_incidents))+
geom_tile()
ggplot(df_stat, aes(x = state, y = state, fill =  number_of_incidents))+
geom_tile()
ggplot(df_stat, aes(x = state, y = state[1], fill =  number_of_incidents))+
geom_tile()
ggplot(df_stat, aes(x = state, y = state, fill =  number_of_incidents))+
geom_tile()
melted_df = melt(df_stat)
library(reshape2)
melted_df = melt(df_stat)
ggplot(melted_df, aes(x = state, y = party, fill =  number_of_incidents))+
geom_tile()
View(melted_df)
ggplot(melted_df, aes(x = state, y = party, fill =  value))+
geom_tile()
runApp()
runApp()
?textAreaInput()
runApp()
